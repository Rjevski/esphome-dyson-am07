esphome:
  name: dyson-am07-fan
  friendly_name: Dyson AM07 Fan
  name_add_mac_suffix: true
  on_boot:
    # get the fan to a known state so local state and fan state are in sync
    then:
      - delay: 5s
      # thus turns on the fan if it's off
      - script.execute: transmit_swing_toggle
      - delay: 500ms
      # gets it to minimal (01) power level
      - repeat:
          count: 9
          then:
            - script.execute: transmit_down
            - delay: 500ms
      # turns it off
      - script.execute: transmit_power_button
      - delay: 500ms
      # finally applies the desired local state to the fan
      - script.execute: set_fan_state

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

logger:
  level: DEBUG

# Enable Home Assistant API
api:
  password: !secret dyson_fan_api_secret

ota:
  password: !secret dyson_fan_api_secret

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_psk
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dyson AM07 Fan Fallback Hotspot"
    password: "s1ikdUMvdH4f"

# TODO: receive codes from the original remote and update local state accordingly
# remote_receiver:
#   pin:
#     number: GPIO16
#     inverted: True
#     mode: INPUT_OUTPUT_OPEN_DRAIN
#   tolerance: 45%
#   dump: all

remote_transmitter:
  carrier_duty_percent: 100%
  pin:
    number: GPIO16
    inverted: true
    mode: OUTPUT_OPEN_DRAIN

globals:
   - id: current_power_code
     type: int
     initial_value: "0"
   - id: fan_power_state
     type: bool
     initial_value: "true"  # to match on_boot action
   - id: desired_fan_speed
     type: int
     initial_value: "1"  
   - id: fan_speed
     type: int
     initial_value: "1"  # to match on_boot action
   - id: desired_swing_state
     type: bool
     initial_value: "false"
   - id: swing_state
     type: bool
     initial_value: "true"  # to match on_boot action

script:
  - id: transmit_power_button
    then:
      - remote_transmitter.transmit_pronto:
          repeat:
            times: 2
          data: !lambda |-
            switch(id(current_power_code)) {
              case 0:
                return "0000 006D 0011 0000 0054 0022 001B 0040 001B 0021 001B 0021 001B 003F 001B 0021 001B 0021 001B 0020 001B 0023 001B 0022 001B 0021 001B 0021 001B 0021 001B 0021 001B 0021 001B 0021 001B 06C3";
              case 1:
                return "0000 006D 0011 0000 0054 0022 001B 0040 001B 0021 001B 0021 001B 003F 001B 0021 001B 0021 001B 0020 001B 0023 001B 0022 001B 0021 001B 0021 001B 0021 001B 0021 001B 0021 001B 003F 001B 06C3";
              default:
                return "0000 006D 0011 0000 0054 0022 001B 0040 001B 0021 001B 0021 001B 003F 001B 0021 001B 0021 001B 0020 001B 0023 001B 0022 001B 0021 001B 0021 001B 0021 001B 0021 001B 003F 001B 0021 001B 06C3";
            }
      - lambda: |-
          switch (id(current_power_code)) {
            case 2:
              id(current_power_code) = 0;
              break;
            default:
              id(current_power_code) += 1;
          }
  - id: transmit_swing_toggle
    then:
      - remote_transmitter.transmit_pronto:
          repeat:
            times: 2
          data: "0000 006D 0011 0000 0054 0022 001C 003F 001B 0021 001C 0021 001C 003F 001C 0021 001C 0021 001C 0021 001B 0040 001C 0022 001B 003F 001B 0021 001B 003F 001B 0021 001B 003E 001B 0021 001C 06C3"
  - id: transmit_up
    then:
      - remote_transmitter.transmit_pronto:
          repeat:
            times: 2
          data: "0000 006D 0011 0000 0058 0022 001B 0040 001B 0022 001B 0021 001B 003F 001B 0021 001B 0021 001B 0021 001B 0023 001B 0040 001B 0022 001B 0040 001B 0021 001B 003F 001B 0021 001B 003F 001B 06C3"
  - id: transmit_down
    then:
      - remote_transmitter.transmit_pronto:
          repeat:
            times: 2
          data: "0000 006D 0011 0000 0053 0022 001B 0040 001B 0022 001B 0021 001B 003F 001B 0021 001B 0021 001B 0021 001B 0041 001B 0040 001B 0040 001B 0040 001B 003F 001B 003F 001B 0021 001B 0021 001B 06C3"
  - id: set_fan_state
    then:
      - if:
          condition:
            lambda: "return (id(desired_fan_speed) > 0) != id(fan_power_state);"
          then:
            - script.execute: transmit_power_button
            - globals.set:
                id: fan_power_state
                value: !lambda "return !id(fan_power_state);"
            - delay: 500ms
      - if:
          condition:
            lambda: "return id(fan_power_state) && (id(desired_swing_state) != id(swing_state));"
          then:
            - script.execute: transmit_swing_toggle
            - globals.set:
                id: swing_state
                value: !lambda "return !(swing_state);"
            - delay: 500ms
      -  while:
          condition:
            lambda: "return id(fan_power_state) && (id(desired_fan_speed) != id(fan_speed));"
          then:
            - if:
                condition:
                  lambda: "return id(desired_fan_speed) > id(fan_speed);"
                then:
                  - script.execute: increment_fan_speed
                else:
                  - script.execute: decrement_fan_speed
            - delay: 500ms
  - id: increment_fan_speed
    then:
      - script.execute: transmit_up
      - globals.set:
          id: fan_speed
          value: !lambda "return id(fan_speed) + 1;"
  - id: decrement_fan_speed
    then:
      - script.execute: transmit_down
      - globals.set:
          id: fan_speed
          value: !lambda "return id(fan_speed) - 1;"

output:
- platform: template
  id: fan_output
  type: float
  write_action:
    then:
      - globals.set:
          id: desired_fan_speed
          value: !lambda "return int(state * 10);"
      - script.execute: set_fan_state

- platform: template
  id: swing_output
  type: binary
  write_action:
    then:
      - globals.set:
          id: desired_swing_state
          value: !lambda "return state;"
      - script.execute: set_fan_state

fan:
  - platform: speed
    output: fan_output
    oscillation_output: swing_output
    name: "Fan"
    speed_count: 10
    restore_mode: RESTORE_DEFAULT_OFF
